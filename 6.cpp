////Реализуйте уникальный алгоритм сортировки sleepsort с асимптотикой O(N) (по процессорному времени).
////
////На стандартный вход программы подается не более 100 строк различной длины.
////Вам необходимо вывести эти строки, отсортированные по длине.
////Строки одинаковой длины могут выводиться в произвольном порядке.
////
////Для каждой входной строки, создайте поток и передайте ей эту строку в качестве параметра.
////Поток должна вызвать sleep(2) или usleep(2) с параметром, пропорциональным длине этой строки.
////Затем поток выводит строку в стандартный поток вывода и завершается.
////Не следует выбирать коэффициент пропорциональности слишком маленьким, вы рискуете получить некорректную сортировку.
//
//#include <iostream>
//#include <thread>
//#include <vector>
//#include <string>
//#include <unistd.h> // для функции sleep
//
//using namespace std;
//
//void sleepsort(const string& str) {
//    // рассчитываем время сна пропорционально длине строки
//    unsigned int sleeptime = str.length() * 10000; // умножаем на 10000 для увеличения точности
//
//    // поток засыпает на заданное время
//    usleep(sleeptime);
//
//    // выводим отсортированную строку
//    cout << str << endl;
//}
//
//int main() {
//    vector<string> strings;
//
//    // считываем строки из стандартного ввода
//    string line;
//    while (getline(cin, line)) {
//        strings.push_back(line);
//    }
//
//    // создаем потоки для каждой строки
//    vector<thread> threads;
//    for (const auto& str : strings) {
//        threads.emplace_back(sleepsort, str);
//    }
//
//    // дожидаемся завершения всех потоков
//    for (auto& th : threads) {
//        th.join();
//    }
//
//    return 0;
//}
